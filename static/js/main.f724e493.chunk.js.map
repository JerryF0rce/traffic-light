{"version":3,"sources":["components/UI/trafficLight.js","components/Navigation/MainMenu.js","App.js","index.js"],"names":["TrafficLight","props","transformRoute","curLight","split","map","word","i","slice","toUpperCase","join","setTimer","path","duration","storageTimerId","state","lastTimerID","clearTimeout","timerID","setTimeout","sessionStorage","setItem","history","replace","numberUntilNextLight","currentLight","currentLightElement","totalSeconds","showTimer","document","querySelector","children","textContent","timerId","setInterval","classList","add","clearInterval","remove","goToRandomLight","lightsRoutes","randomCount","Math","floor","random","goToYellowLight","currentLightRoute","goToRedLight","goToGreenLight","location","pathname","redLight","blinkingDuration","yellowLight","greenLight","lastLight","getItem","console","log","this","className","Component","MainMenu","to","App","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f724e493.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './trafficLight.css'\r\n   \r\nclass TrafficLight extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         currentLightRoute: this.props.history.location.pathname,\r\n         redLight: {\r\n            duration: 10000,\r\n            blinkingDuration: 3000,\r\n         },\r\n         yellowLight: {\r\n            duration: 3000\r\n         }, \r\n         greenLight: {\r\n            duration: 15000,\r\n            blinkingDuration: 3000,\r\n         },\r\n         lastLight: sessionStorage.getItem('lastLight') || '',\r\n         lastTimerID: sessionStorage.getItem('lastTimerID') || ''\r\n      };\r\n   }\r\n\r\n   componentDidMount () {\r\n      console.log('componentDidMount')\r\n      const currentLight = this.transformRoute(this.state.currentLightRoute);\r\n\r\n      const currentLightElement = document.querySelector(`.${currentLight}`);\r\n      // before '/yellow-light' after 'yellowLight'\r\n\r\n      if (currentLight !== 'yellowLight') {\r\n         sessionStorage.setItem('lastLight', currentLight);\r\n         this.numberUntilNextLight(currentLight, currentLightElement)\r\n      }\r\n\r\n      if (currentLight === 'redLight' || 'greenLight') {\r\n         this.goToYellowLight(currentLight);\r\n      }\r\n      if (currentLight === 'yellowLight' && !this.state.lastLight) this.goToRandomLight(currentLight);\r\n      if (currentLight === 'yellowLight' && this.state.lastLight === 'greenLight') this.goToRedLight(currentLight);\r\n      if (currentLight === 'yellowLight' && this.state.lastLight === 'redLight') this.goToGreenLight(currentLight);\r\n\r\n      currentLightElement.classList.add('activeLights');\r\n   }\r\n\r\n\r\n   transformRoute = (curLight) => {\r\n      return curLight\r\n         .split('-')\r\n         .map(\r\n            (word, i) => i === 0 ?  word.slice(1) : word[0].toUpperCase() + word.slice(1)\r\n         )\r\n         .join('');\r\n   }\r\n\r\n   setTimer = (path, duration) => {\r\n      let storageTimerId = +this.state.lastTimerID;\r\n      clearTimeout(storageTimerId);\r\n      let timerID = setTimeout(() => {\r\n         if (path !== '/yellow-light') {\r\n         sessionStorage.setItem('lastLight', `${this.transformRoute(path)}`);\r\n         }\r\n         this.props.history.replace(path);\r\n      }, duration);\r\n      sessionStorage.setItem('lastTimerID', `${timerID}`)\r\n   }\r\n\r\n   numberUntilNextLight = (currentLight , currentLightElement) => {\r\n      let totalSeconds = this.state[currentLight].duration / 1000;\r\n      let showTimer = document.querySelector(`.${currentLight}`).children[0];\r\n      showTimer.textContent = totalSeconds - 1;\r\n      let timerId = setInterval(() => {\r\n         showTimer.textContent = totalSeconds - 2\r\n         totalSeconds--\r\n         if (totalSeconds === 4) {\r\n            currentLightElement.classList.add('hightlight')\r\n         }\r\n         if (totalSeconds === 0) {\r\n            clearInterval(timerId);\r\n            currentLightElement.classList.remove('hightlight')\r\n         }\r\n      }, 1000);\r\n   }\r\n\r\n   goToRandomLight = (currentLight) => {\r\n      const lightsRoutes = ['/green-light', '/red-light'];\r\n      let randomCount = Math.floor(Math.random()*2);\r\n      sessionStorage.setItem('lastLight', this.transformRoute(lightsRoutes[randomCount]));\r\n      this.setTimer(lightsRoutes[randomCount], this.state[currentLight].duration)\r\n   }\r\n\r\n   goToYellowLight = (currentLight) => {\r\n      if (this.state.currentLightRoute === '/yellow-light') return;\r\n      this.setTimer('/yellow-light', this.state[currentLight].duration);\r\n   }\r\n\r\n   goToRedLight = (currentLight) => {\r\n      this.setTimer('/red-light', this.state[currentLight].duration);\r\n   }\r\n\r\n   goToGreenLight = (currentLight) => {\r\n      this.setTimer('/green-light', this.state[currentLight].duration);\r\n   }\r\n\r\n   render () {\r\n      return (\r\n         <div className=\"trafficLight\">\r\n            <div className=\"light redLight\"><div className=\"timer\"></div></div>\r\n            <div className=\"light yellowLight\"></div>\r\n            <div className=\"light greenLight\"><div className=\"timer\"></div></div>\r\n         </div>\r\n      );\r\n   }\r\n   \r\n}\r\n\r\nexport default TrafficLight;","import React from 'react';\r\nimport './MainMenu.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainMenu = () => {\r\n   return (\r\n      <header>\r\n         <div className=\"container\">\r\n            <Link to=\"/red-light\">Go to: /red-light</Link>\r\n            <Link to=\"/yellow-light\" >Go to: /yellow-light</Link>\r\n            <Link to=\"/green-light\" >Go to: /green-light</Link>\r\n         </div>\r\n      </header>\r\n   );\r\n}\r\n\r\nexport default MainMenu;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport TrafficLight from './components/UI/trafficLight';\nimport MainMenu from './components/Navigation/MainMenu';\n\nclass App extends Component {\n\n   render() {\n      return (\n         <div className=\"App\"> \n            <Route path=\"/\" component={MainMenu}/>\n            <Route path=\"/red-light\" component={TrafficLight} />\n            <Route path=\"/yellow-light\" component={TrafficLight} />\n            <Route path=\"/green-light\" component={TrafficLight} />\n         </div>\n      );\n   }\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<Router> <App /> </Router>, document.getElementById('root'));\n\n"],"sourceRoot":""}